name: Deploy Notification CI/CD

on:
  push:
    branches: [ "main", "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "❌ SSH_HOST secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_NAME }}" ]; then
            echo "❌ SSH_NAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_KEY }}" ]; then
            echo "❌ SSH_KEY secret is not set"
            exit 1
          fi
          echo "✅ All required secrets are set"

      - name: Check SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "SSH connection test successful"
            whoami
            pwd

      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/Notification
            
            echo "=== Starting Notification Service deployment ==="
            
            # Сохраняем текущее состояние
            echo "=== Saving current state ==="
            docker-compose ps
            
            # Graceful shutdown существующих сервисов
            echo "=== Graceful shutdown of existing services ==="
            docker-compose down --timeout 30 || echo "Some services may not have stopped gracefully"
            
            # Удаляем старые контейнеры если есть проблемы
            echo "=== Cleaning up old containers ==="
            docker-compose rm -f || true
            
            # Принудительно удаляем все контейнеры если есть проблемы с Docker Compose
            echo "=== Force cleanup if Docker Compose has issues ==="
            docker-compose down --remove-orphans || true
            docker system prune -f || true
            
            # Быстрая проверка портов
            echo "=== Checking port availability ==="
            if lsof -i :8080 > /dev/null 2>&1; then
              echo "❌ Port 8080 is in use, forcing cleanup"
              lsof -ti :8080 | xargs kill -9 || true
              sleep 2
            fi
            
            # Обновляем код с merge strategy
            echo "=== Updating code ==="
            git fetch origin
            git stash  # Сохраняем локальные изменения
            git pull origin main --rebase
            git stash pop || true  # Восстанавливаем если есть
            
            # Проверяем конфигурацию
            echo "=== Checking configuration ==="
            if [ ! -f .env ]; then
              echo "❌ .env file not found, copying from example"
              cp env.example .env || echo "No env.example found"
            fi
            
            # Запускаем сервисы с новой версией
            echo "=== Building and starting services ==="
            if ! docker-compose up -d --build --force-recreate; then
              echo "❌ Docker Compose failed, trying alternative approach"
              echo "=== Starting service individually ==="
              docker-compose up -d notification-service
            fi
            
            # Проверяем логи если есть проблемы
            echo "=== Checking logs for errors ==="
            docker-compose logs --tail=10 || true
            
            # Быстрая проверка запуска
            echo "=== Quick startup check ==="
            sleep 5
            
            # Проверяем статус контейнеров
            echo "=== Checking container status ==="
            docker-compose ps
            
            # Быстрый health check
            echo "=== Quick health check ==="
            for i in {1..5}; do
              if curl -f http://localhost:8080/health > /dev/null 2>&1; then
                echo "✅ Notification Service is healthy after deployment"
                break
              else
                echo "⏳ Waiting for service... (attempt $i/5)"
                if [ $i -eq 5 ]; then
                  echo "⚠️ Service may still be starting, checking logs..."
                  docker-compose logs --tail=10 notification-service
                  # Не выходим с ошибкой, возможно сервис еще запускается
                fi
                sleep 5
              fi
            done
            
            # Финальная проверка
            echo "=== Final status check ==="
            docker-compose ps
            
            # Проверяем логи на ошибки
            echo "=== Checking for errors in logs ==="
            docker-compose logs --tail=10 notification-service | grep -i error || echo "No errors found in recent logs"
            
            # Проверяем переменные окружения
            echo "=== Checking environment variables ==="
            docker-compose exec -T notification-service env | grep -E "(MAIL|SMTP|KAFKA)" || echo "No email/Kafka env vars found!"
            
            # Проверяем размер образа
            echo "=== Checking image size ==="
            docker images notification-service --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
            
            echo "=== Notification Service deployment completed ==="