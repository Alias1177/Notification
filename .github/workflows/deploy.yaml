name: Deploy Notification Service CI/CD

on:
  push:
    branches: [ "mainReadyTrade", "master" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "."
          target: "/home/Notification"
          overwrite: true

      - name: Check server environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            
            echo "=== Server Environment Check ==="
            cd /home/Notification || { echo "Failed to cd to /home/Notification"; exit 1; }
            
            echo "Current directory: $(pwd)"
            echo "Files in directory:"
            ls -la
            
            # Check Docker
            docker --version || { echo "Docker not installed"; exit 1; }
            
            # Check Docker Compose versions
            if command -v docker-compose &> /dev/null; then
              echo "docker-compose available: $(docker-compose --version)"
            fi
            
            if docker compose version &> /dev/null; then
              echo "docker compose available: $(docker compose version)"
            fi

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_NAME }}
          key: ${{ secrets.SSH_KEY }}
          timeout: 60s
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== Starting Deployment ==="
            cd /home/Notification || { echo "Failed to cd to /home/Notification"; exit 1; }
            
            # Create .env file
            echo "=== Creating .env file ==="
            echo "${{ secrets.ENV }}" > .env
            chmod 600 .env
            echo ".env file created"
            
            # Check if docker-compose.yml exists in root
            if [ -f "docker-compose.yml" ]; then
              COMPOSE_FILE="docker-compose.yml"
              WORK_DIR="."
              echo "Found docker-compose.yml in root directory"
            # Check if docker-compose.yml exists in docker folder
            elif [ -f "docker/docker-compose.yml" ]; then
              COMPOSE_FILE="docker/docker-compose.yml"
              WORK_DIR="docker"
              echo "Found docker-compose.yml in docker directory"
              # Copy .env to docker directory
              cp .env docker/
            else
              echo "ERROR: docker-compose.yml not found!"
              echo "Checking common locations:"
              find . -name "docker-compose.yml" -o -name "docker-compose.yaml" 2>/dev/null || echo "No compose files found"
              echo "Files in current directory:"
              ls -la
              echo "Files in docker directory (if exists):"
              ls -la docker/ 2>/dev/null || echo "No docker directory"
              exit 1
            fi
            
            echo "=== Using compose file: $COMPOSE_FILE ==="
            echo "=== Working directory: $WORK_DIR ==="
            
            # Change to working directory if needed
            if [ "$WORK_DIR" != "." ]; then
              cd $WORK_DIR
              echo "Changed to directory: $(pwd)"
            fi
            
            # Determine Docker Compose command
            if command -v docker-compose &> /dev/null; then
              COMPOSE_CMD="docker-compose"
              echo "Using: docker-compose"
            elif docker compose version &> /dev/null; then
              COMPOSE_CMD="docker compose"
              echo "Using: docker compose"
            else
              echo "ERROR: Neither docker-compose nor docker compose is available!"
              exit 1
            fi
            
            # Stop existing containers
            echo "=== Stopping existing containers ==="
            $COMPOSE_CMD down --remove-orphans || echo "No containers to stop"
            
            # Clean up unused images
            echo "=== Cleaning up unused images ==="
            docker image prune -f || echo "Image cleanup skipped"
            
            # Build containers
            echo "=== Building containers ==="
            $COMPOSE_CMD build --no-cache
            
            # Start containers
            echo "=== Starting containers ==="
            $COMPOSE_CMD up -d
            
            # Wait for containers to start
            echo "=== Waiting for containers to start ==="
            sleep 15
            
            # Check container status
            echo "=== Container Status ==="
            $COMPOSE_CMD ps
            
            # Show recent logs for debugging
            echo "=== Recent Logs ==="
            $COMPOSE_CMD logs --tail=30
            
            # Verify containers are running
            echo "=== Verifying deployment ==="
            if $COMPOSE_CMD ps | grep -q "Up\|running"; then
              echo "✅ Deployment successful! Containers are running."
            else
              echo "❌ Deployment may have issues. Check logs above."
              $COMPOSE_CMD ps
              exit 1
            fi
            
            echo "=== Deployment Complete ==="